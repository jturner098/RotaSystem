/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.copyofrotasystem;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Random;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author josephturner
 */
public class EditRota extends javax.swing.JFrame {
    DAO db = new DAO();
    static User user;
    LocalDate date;

    /**
     * Creates new form EditRota
     */
    public EditRota(User user) {
        initComponents();
        this.user = user;
        date = LocalDate.now();
        DateField1.setText(String.valueOf(date));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddNewShift = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        lblUpcomingHoliday = new javax.swing.JLabel();
        StaffMemberField1 = new javax.swing.JComboBox<>();
        StaffMember1 = new javax.swing.JLabel();
        lblAddNewShift = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UpcomingHolidayTable = new javax.swing.JTable();
        lblLocation = new javax.swing.JLabel();
        LocationField = new javax.swing.JComboBox<>();
        lblDate = new javax.swing.JLabel();
        DateField = new javax.swing.JTextField();
        lblStartTime = new javax.swing.JLabel();
        StartTimeField = new javax.swing.JTextField();
        lblEndTime = new javax.swing.JLabel();
        EndTimeField = new javax.swing.JTextField();
        btnSubmitNewShift = new javax.swing.JButton();
        ShiftErrorMessage = new javax.swing.JLabel();
        btnAddShiftBack = new javax.swing.JButton();
        GenerateRota = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnBackDate = new javax.swing.JButton();
        DateField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnForwardDate = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        RotaTable = new javax.swing.JTable();
        btnGenerateRota1 = new javax.swing.JButton();
        GenerateErrorMessage = new javax.swing.JLabel();
        lblStaffAmount = new javax.swing.JLabel();
        StaffQuantityField = new javax.swing.JTextField();
        btnBackDate1 = new javax.swing.JButton();
        btnForwardDate1 = new javax.swing.JButton();
        btnSaveGeneratedRota = new javax.swing.JButton();
        Title = new javax.swing.JLabel();
        StaffMember = new javax.swing.JLabel();
        StaffMemberField = new javax.swing.JComboBox<>();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ShiftTable = new javax.swing.JTable();
        btnConfirmChanges = new javax.swing.JButton();
        btnAddNewShift = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ErrorMessage = new javax.swing.JLabel();
        btnGenerateRota = new javax.swing.JButton();

        AddNewShift.setSize(new java.awt.Dimension(693, 541));
        AddNewShift.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                AddNewShiftWindowOpened(evt);
            }
        });

        jPanel1.setSize(new java.awt.Dimension(628, 431));

        lblUpcomingHoliday.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        lblUpcomingHoliday.setText("Upcoming Time Off:");

        StaffMemberField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StaffMemberField1ActionPerformed(evt);
            }
        });

        StaffMember1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        StaffMember1.setText("Staff Member:");
        StaffMember1.setToolTipText("");

        lblAddNewShift.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        lblAddNewShift.setText("Add New Shift");

        UpcomingHolidayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Start Date", "End Date", "Reason"
            }
        ));
        jScrollPane1.setViewportView(UpcomingHolidayTable);

        lblLocation.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        lblLocation.setText("Location:");

        lblDate.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        lblDate.setText("Date:");

        lblStartTime.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        lblStartTime.setText("Start Time:");

        lblEndTime.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        lblEndTime.setText("End Time:");

        btnSubmitNewShift.setBackground(new java.awt.Color(128, 191, 180));
        btnSubmitNewShift.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        btnSubmitNewShift.setText("Submit New Shift");
        btnSubmitNewShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitNewShiftActionPerformed(evt);
            }
        });

        ShiftErrorMessage.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        ShiftErrorMessage.setForeground(new java.awt.Color(255, 51, 0));
        ShiftErrorMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnAddShiftBack.setBackground(new java.awt.Color(128, 191, 180));
        btnAddShiftBack.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnAddShiftBack.setText("Back");
        btnAddShiftBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddShiftBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(224, 224, 224)
                        .addComponent(lblLocation)
                        .addGap(18, 18, 18)
                        .addComponent(LocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DateField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(lblStartTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StartTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(lblEndTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EndTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(btnAddShiftBack, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSubmitNewShift)
                .addGap(224, 224, 224))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 9, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(StaffMember1)
                                .addGap(18, 18, 18)
                                .addComponent(StaffMemberField1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(159, 159, 159))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lblAddNewShift)
                                .addGap(213, 213, 213))))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(ShiftErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addComponent(lblUpcomingHoliday)
                    .addContainerGap(500, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddNewShift)
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StaffMemberField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StaffMember1))
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLocation)
                            .addComponent(LocationField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDate)
                            .addComponent(DateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStartTime)
                            .addComponent(StartTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEndTime)
                            .addComponent(EndTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(ShiftErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSubmitNewShift, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddShiftBack, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(106, 106, 106)
                    .addComponent(lblUpcomingHoliday)
                    .addContainerGap(402, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout AddNewShiftLayout = new javax.swing.GroupLayout(AddNewShift.getContentPane());
        AddNewShift.getContentPane().setLayout(AddNewShiftLayout);
        AddNewShiftLayout.setHorizontalGroup(
            AddNewShiftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddNewShiftLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        AddNewShiftLayout.setVerticalGroup(
            AddNewShiftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddNewShiftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        GenerateRota.setSize(new java.awt.Dimension(554, 616));

        jPanel2.setSize(new java.awt.Dimension(542, 604));

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        jLabel2.setText("Generate Rota");

        btnBackDate.setText("<");
        btnBackDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackDateActionPerformed(evt);
            }
        });

        DateField1.setText("jTextField1");
        DateField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateField1ActionPerformed(evt);
            }
        });
        DateField1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                DateField1PropertyChange(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        jLabel3.setText("Date:");

        btnForwardDate.setText(">");
        btnForwardDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForwardDateActionPerformed(evt);
            }
        });

        RotaTable.setAutoCreateRowSorter(true);
        RotaTable.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 13)); // NOI18N
        RotaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Staff Member", "Location", "Start Time", "End Time"
            }
        ));
        jScrollPane3.setViewportView(RotaTable);

        btnGenerateRota1.setBackground(new java.awt.Color(128, 191, 180));
        btnGenerateRota1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        btnGenerateRota1.setText("Generate Rota");
        btnGenerateRota1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateRota1ActionPerformed(evt);
            }
        });

        GenerateErrorMessage.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        GenerateErrorMessage.setForeground(new java.awt.Color(255, 0, 0));
        GenerateErrorMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblStaffAmount.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        lblStaffAmount.setText("Number of Staff Working:");

        StaffQuantityField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        StaffQuantityField.setText("5");

        btnBackDate1.setText("<");
        btnBackDate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackDate1ActionPerformed(evt);
            }
        });

        btnForwardDate1.setText(">");
        btnForwardDate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForwardDate1ActionPerformed(evt);
            }
        });

        btnSaveGeneratedRota.setBackground(new java.awt.Color(128, 191, 180));
        btnSaveGeneratedRota.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        btnSaveGeneratedRota.setText("Save Generated Rota");
        btnSaveGeneratedRota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveGeneratedRotaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSaveGeneratedRota)
                    .addComponent(btnGenerateRota1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(176, 176, 176))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(69, 69, 69))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btnBackDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DateField1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnForwardDate)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStaffAmount)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btnBackDate1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StaffQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnForwardDate1)
                                .addGap(43, 43, 43)))
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(GenerateErrorMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6))))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblStaffAmount))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnForwardDate)
                    .addComponent(DateField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBackDate)
                    .addComponent(StaffQuantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnForwardDate1)
                    .addComponent(btnBackDate1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGenerateRota1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 305, Short.MAX_VALUE)
                .addComponent(GenerateErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnSaveGeneratedRota, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(157, 157, 157)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(19, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout GenerateRotaLayout = new javax.swing.GroupLayout(GenerateRota.getContentPane());
        GenerateRota.getContentPane().setLayout(GenerateRotaLayout);
        GenerateRotaLayout.setHorizontalGroup(
            GenerateRotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GenerateRotaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        GenerateRotaLayout.setVerticalGroup(
            GenerateRotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GenerateRotaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(620, 485));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Title.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        Title.setText("Edit Rota");
        Title.setToolTipText("");

        StaffMember.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        StaffMember.setText("Staff Member:");
        StaffMember.setToolTipText("");

        StaffMemberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StaffMemberFieldActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(128, 191, 180));
        btnBack.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        ShiftTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ShiftID", "Date", "Start Time", "End Time", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ShiftTable);

        btnConfirmChanges.setBackground(new java.awt.Color(128, 191, 180));
        btnConfirmChanges.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnConfirmChanges.setText("Confirm Changes");
        btnConfirmChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmChangesActionPerformed(evt);
            }
        });

        btnAddNewShift.setBackground(new java.awt.Color(128, 191, 180));
        btnAddNewShift.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnAddNewShift.setText("Add New Shift");
        btnAddNewShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewShiftActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jLabel1.setText("To make changes to a shift, edit the field and select 'Confirm Changes'.");

        ErrorMessage.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        ErrorMessage.setForeground(new java.awt.Color(255, 51, 0));

        btnGenerateRota.setBackground(new java.awt.Color(128, 191, 180));
        btnGenerateRota.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        btnGenerateRota.setText("Generate Rota");
        btnGenerateRota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateRotaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(77, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(65, 65, 65))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(105, 105, 105)
                                        .addComponent(Title))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(StaffMember)
                                        .addGap(47, 47, 47)
                                        .addComponent(StaffMemberField, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnAddNewShift, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGenerateRota, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnConfirmChanges))
                    .addComponent(ErrorMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StaffMember)
                    .addComponent(StaffMemberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ErrorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerateRota, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddNewShift, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                        .addComponent(btnConfirmChanges, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    try {
            ResultSet rs = db.GenerateStaffList(); // SQL Statement - Select all of the staff details from the database         
            while (rs.next()) { // For each selected record
                String name = rs.getInt("staffid") + " - " + rs.getString("firstname") + " " + rs.getString("surname"); // Create a string using the user's ID, first name and Surname
                StaffMemberField.addItem(name); // Add the string to the combo box
                }
            } catch(Exception e) {
                
        }
    }//GEN-LAST:event_formWindowOpened

    private void StaffMemberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StaffMemberFieldActionPerformed
            DefaultTableModel dtm = (DefaultTableModel) ShiftTable.getModel();   
            dtm.setRowCount(0);
        
            String staffName = (String) StaffMemberField.getSelectedItem(); // Gets the selected staff member from the Staff Member combo box
            String[] nameParts = staffName.split(" "); // Splits the selected record from the Staff Member combo box into the StaffID, First Name and Surname, stores values in a string array
            int staffID = Integer.valueOf(nameParts[0]); // Stores the StaffID of the selected user from the string array
            
            try {            
            ResultSet rs = db.UserShifts(staffID); // SQL Statement - Select all of the staff's shifts
            while (rs.next()) { // For each selected record
                String shiftID = rs.getString("shiftID"); // ShiftID is the shiftID from the current record
                String location = rs.getString("location"); // Location is the location from the current record
                String date = rs.getString("shiftdate"); // Shift Date is the date from the current record
                String startTime = rs.getString("starttime"); // Start Time is the start time from the current record
                String endTime = rs.getString("endtime"); // End Time is the end time from the current record
                String[] tableData = {shiftID, date, startTime, endTime, location}; // Creates a string array using all the shift data

                dtm.addRow(tableData); // Adds array data to table
        }
        } catch(Exception e) {
            
        }
    }//GEN-LAST:event_StaffMemberFieldActionPerformed

    private void AddNewShiftWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_AddNewShiftWindowOpened
            try {   
                ResultSet rs = db.GenerateStaffList(); // SQL Statement - Selects all of the staff members from the database        
                while (rs.next()) {
                    String name = rs.getInt("staffid") + " - " + rs.getString("firstname") + " " + rs.getString("surname"); // Creates a string from the selected record using the staff member's ID, first name and surname
                    StaffMemberField1.addItem(name); // Adds the string to the Staff Member combo box
                }
            } catch(Exception e) {
         
            }   
    
            try {
                ResultSet rs = db.GenerateLocations(); // SQL Statement - Selects all of the locations from the database
                while (rs.next()) {
                    String location = rs.getInt("locationid") + " - " + rs.getString("location"); // Create a string from the selected record using the location ID and name
                    LocationField.addItem(location); // Adds the string to the Location combo box
                }
            } catch(Exception e) {
        
            }
    
            
    }//GEN-LAST:event_AddNewShiftWindowOpened

    private void StaffMemberField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StaffMemberField1ActionPerformed
            DefaultTableModel dtm = (DefaultTableModel) UpcomingHolidayTable.getModel(); 
            dtm.setRowCount(0); // Clear the upcoming holiday table
            
            String staffName = (String) StaffMemberField1.getSelectedItem(); // Staff name is the currently selected staff member from the combo box           
            String[] nameParts = staffName.split(" "); // Splits the selected record from the Staff Member combo box into the StaffID, First Name and Surname, stores values in a string array
            int staffID = Integer.valueOf(nameParts[0]); // Stores the StaffID of the selected user from the string array
            String firstName = nameParts[2]; // Store the First Name of the selected user from the string array
            String surname = nameParts[3]; // Store the Surname of the selected user from the string array
            
            lblUpcomingHoliday.setText(firstName + "'s Upcoming Time Off:"); // Sets the header to reflect the staff member's time off
            
            try { 
                ResultSet rs = db.UpcomingHoliday(staffID); // SQL Statement - Returns any of the staff member's approved holiday requests

                while (rs.next()) { // For each selected record
                        String startDate = rs.getString("requeststartdate"); // Start Date is the start date from the current record
                        String endDate = rs.getString("requestenddate"); // End Date is the end date from the current record
                        String reason = rs.getString("reason"); // Reason is the reason from the current record

                        String[] tableData = {startDate, endDate, reason}; // Creates a string array using all of the time off data

                        dtm.addRow(tableData);    
                }
            } catch(Exception e) {

            }
    }//GEN-LAST:event_StaffMemberField1ActionPerformed

    private void btnAddNewShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewShiftActionPerformed
        AddNewShift.setVisible(true); // Makes the Add New Shift screen visible
        jPanel1.setVisible(true); // Makes the Add New Shift screen visible
            try {
            ResultSet rs = db.GenerateStaffList(); // SQL Statement - Selects all of the staff members from the database          
            while (rs.next()) { // For each staff member
                String name = rs.getInt("staffid") + " - " + rs.getString("firstname") + " " + rs.getString("surname"); // Creates a string from the selected record using the staff member's ID, first name and surname
                StaffMemberField1.addItem(name); // Adds the string to the Staff Member combo box
                }
            } catch(Exception e) {
                
        }
    }//GEN-LAST:event_btnAddNewShiftActionPerformed

    private void btnSubmitNewShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitNewShiftActionPerformed
        boolean holiday = false;
        
        try {
            String location = (String) LocationField.getSelectedItem(); // Location is the location selected from the combo box by the manager
            String[] locationParts = location.split(" "); // Splits the location into the location ID and name
            int locationID = Integer.valueOf(locationParts[0]); // Stores the ID of the location
            
            String staffName = (String) StaffMemberField1.getSelectedItem(); // Staff Member is the staff member selected from the combo boxy by the manager            
            String[] nameParts = staffName.split(" "); // Splits the staff member into the ID, first name and surname
            int staffID = Integer.valueOf(nameParts[0]); // Stores the ID of the staff member
            
            String date = DateField.getText(); // Date is the date entered by the manager
            String startTime = StartTimeField.getText(); // Start Time is the start time entered by the manager
            String endTime = EndTimeField.getText(); // End Time is the end time entered by the manager

            if (date.equals("") || startTime.equals("") || endTime.equals("")) { // If any of the fields are empty
            ShiftErrorMessage.setText("Error - All fields must be filled in in order to be submitted!"); // Display an error message to tell the user that some of the fields are empty
            } else if (holiday == true) { // If shift takes place during holiday
                ShiftErrorMessage.setText(nameParts[2] + " has an approved holiday when this shift is due to take place!"); // Inform manager that user is unavailable for this shift
            } else {
                int result = DAO.SubmitShift(staffID, locationID, date, startTime, endTime); // SQL Statement - Adds new shift to database
                if (result == 1) { // If shift is submitted successfully
                    DateField.setText(""); // Erase Date field
                    StartTimeField.setText(""); // Erase Start Time field
                    EndTimeField.setText(""); // Erase End Time field
                    ShiftErrorMessage.setText("Request sent!"); // Display message telling manager the shift was added
                } else {
                    ShiftErrorMessage.setText("Error whilst inserting into database!"); // Display message telling manager the shift was not added
                }
            }
        } catch(Exception e) {
            ShiftErrorMessage.setText(e.getMessage()); // Display the SQL error
        }        
    }//GEN-LAST:event_btnSubmitNewShiftActionPerformed

    private void btnConfirmChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmChangesActionPerformed
        for (int i = 0; i < ShiftTable.getRowCount(); i++) { // For each shift in the shift table
            DefaultTableModel dtm = (DefaultTableModel)ShiftTable.getModel();
            String shiftID = (dtm.getValueAt(i, 0).toString()); // ShiftID is equal to the shiftID in the current row
            String date = (dtm.getValueAt(i, 1).toString()); // Date is equal to the date in the current row
            String startTime = (dtm.getValueAt(i, 2).toString()); // Start Time is equal to the startTime in the current row
            String endTime = (dtm.getValueAt(i, 3).toString()); // End Time is equal to the endTime in the current row
            String location = (dtm.getValueAt(i,4).toString()); // Location is equal to the location in the current row
            String[] shift = {shiftID, date, startTime, endTime, location}; // Stores shift details as a string array
            try {
                int result = db.UpdateShift(shift); // SQL Statement - Updates shift using string array
            } catch(Exception e) {
                ErrorMessage.setText(e.getMessage()); // Display the SQL error
            }   
        }                    
    }//GEN-LAST:event_btnConfirmChangesActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        ManagerMainMenu mmm = new ManagerMainMenu(user); // Creates an instance of the Manager Main Menu
        mmm.setVisible(true); // Makes Manager Main Menu visible
        dispose(); // Closes Edit Rota screen
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnForwardDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForwardDateActionPerformed
        date = date.plusDays(1); // Increases value of date
        DateField1.setText(String.valueOf(date)); // Displays new date value
        UpdateTable(); // Method - Updates rota table
    }//GEN-LAST:event_btnForwardDateActionPerformed

    private void btnBackDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackDateActionPerformed
        date = date.plusDays(-1); // Decreases value of date
        DateField1.setText(String.valueOf(date)); // Displays new date value
        UpdateTable(); // Method - Updates rota table
    }//GEN-LAST:event_btnBackDateActionPerformed

    private void btnGenerateRotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateRotaActionPerformed
        GenerateRota.setVisible(true); // Makes Generate Rota screen visible
        jPanel2.setVisible(true); // Makes Generate Rota screen visible
        UpdateTable(); // Method - Updates rota table
    }//GEN-LAST:event_btnGenerateRotaActionPerformed

    private void DateField1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_DateField1PropertyChange

    }//GEN-LAST:event_DateField1PropertyChange

    private void DateField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateField1ActionPerformed

    }//GEN-LAST:event_DateField1ActionPerformed

    private void btnGenerateRota1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateRota1ActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) RotaTable.getModel();
        GenerateErrorMessage.setText("Generating..."); // Displays a message telling the manager that the rota is being created
        int staffQuantity = Integer.valueOf(StaffQuantityField.getText()); // Stores number of staff required to work
        String date = DateField1.getText(); // Stores date that rota is being generated for

        try {
            GenerateRota(staffQuantity, date); // Method - Generates rota using number of staff require to work and the date as parameters
        } catch (Exception e) {
            GenerateErrorMessage.setText(e.getMessage()); // Displays the SQL error
        }
        
    }//GEN-LAST:event_btnGenerateRota1ActionPerformed
    
    private void GenerateRota(int staffQuantity, String date) throws SQLException {
        ResultSet rs;
        rs = db.ExecuteQuery("SELECT COUNT(staffid) FROM tblshift WHERE shiftdate = '" + date + "';"); // SQL Statement - Checks the number of people currently working on the selected day
        rs.next();
        int staffWorking = rs.getInt(1); // Stores the number of people currently working
        DefaultTableModel dtm = (DefaultTableModel) RotaTable.getModel(); 
         
        if (staffWorking == staffQuantity) { // If the number of people working already meets the required number
            GenerateErrorMessage.setText("Generation Completed"); // No further generation needs to take place
            return;
        } else if (staffQuantity <= 0) { // If user enters a number equal to 0 or a negative number
            GenerateErrorMessage.setText("Number of staff working must be greater than 0!"); // Displays an error message to inform the manager that a new number needs to be entered
            return;
        } else {
            dtm.setRowCount(0); // Empties table
            try {
                Random random = new Random();
                int staffID;
                int startTimeHour;
                int endTimeHour;
                int locationID;
                
                rs = db.ExecuteQuery("SELECT COUNT(staffid) AS total FROM tblstaff WHERE userlevel != 'Manager';"); // SQL Statement - Returns the number of staff members available to work
                rs.next();
                int total = rs.getInt("total"); // Stores the number of staff members to choose from
                
                for (int i = 0; i<staffQuantity-staffWorking; i++) { // Repeat for the number of people that need to be generated

                    staffID = random.nextInt(total) + 1; // Generates the staffID of the staff member
                    rs = db.ExecuteQuery("SELECT firstname, surname FROM tblstaff WHERE staffid = '" + staffID + "';"); // SQL Statement - Selects name of staff member based on their staffID
                    rs.next();
                    String name = rs.getString("firstname") + " " + rs.getString("surname"); // Creates one string containing the staff member's full name

                    startTimeHour = random.nextInt(3) + 8; // Generates the start time of the shift
                    endTimeHour = random.nextInt(3) + 16; // Generates the end time of the shift
                    String startTime;
                    if (startTimeHour == 10){ // If the start time is 10
                        startTime = (startTimeHour + ":00");
                    } else {
                        startTime = ("0" + startTimeHour + ":00"); // Formats the start time into HH:MM
                    }
                    String endTime = (endTimeHour + ":00"); // Formats the end time into HH:MM

                    locationID = random.nextInt(5) + 1; // Generates the locationID of the next shift

                    String[] tableData = {name, String.valueOf(locationID), startTime, endTime}; // Stores shift data in a string array
                    dtm.addRow(tableData); // Adds shift to table
                
                }

            } catch(Exception e) {
                System.out.println(e.getMessage()); // Displays the SQL error
            }

        }
         boolean check = CheckRota(staffQuantity); // Method - Checks generated shifts meet the criteria
         if (check == true) { // If the criteria is met
            GenerateErrorMessage.setText("Generation Completed"); // No further generation needs to take place
         } else { // If the criteria is not met
            GenerateRota(staffQuantity, date); // The rota is regenerated   
         }
    }
    
    public boolean CheckRota(int staffQuantity) {
        DefaultTableModel dtm = (DefaultTableModel)RotaTable.getModel();  
        
        boolean duplicate = false;
        boolean earlyStart = false;
        boolean lateFinish = false;
        boolean kitchen = false;
        boolean waiting = false;
        
        String staffMember = (dtm.getValueAt((RotaTable.getRowCount()-1), 0).toString()); // Stores name of first staff member in the table
        
                
        for (int i = 0; i < staffQuantity - 1; i++) { // For each record in the table
                    if (dtm.getValueAt(i, 0).toString().equals(staffMember)) { // If two names are the same
                        duplicate = true; // Duplicate check is true
                    }
                    if (dtm.getValueAt(i, 2).equals("08:00")) { // If at least one person starts at 08:00
                        earlyStart = true; // Early Start check is true
                    }
                    if (dtm.getValueAt(i, 3).equals("18:00")) { // If at least one person finishes at 18:00
                        lateFinish = true; // Late Finish check is true
                    }
                    if (dtm.getValueAt(i, 1).equals("1")) { // If at least one person is working in the kitchen
                        kitchen = true; // Kitchen check is true
                    }
                    if (dtm.getValueAt(i, 1).equals("2") 
                       || dtm.getValueAt(i,1).equals("3")) { // If at least one person is waiting
                        waiting = true; // Waiting check is true
                    }               
        }

        if (duplicate == true) { // If the Duplicate check is true
            return false; // The criteria is not met
        } 
        if (earlyStart == false || lateFinish == false || kitchen == false || waiting == false) { // If any of the other checks are not met
            return false; // The criteria is not met
        } else {
            return true; // The criteria is met
        }
    }
    
    private void btnBackDate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackDate1ActionPerformed
        int staffQuantity = Integer.valueOf(StaffQuantityField.getText()); // Stores value of number of staff working
        staffQuantity = staffQuantity - 1; // Decreases value by 1
        StaffQuantityField.setText(String.valueOf(staffQuantity)); // Displays new value        
    }//GEN-LAST:event_btnBackDate1ActionPerformed

    private void btnForwardDate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForwardDate1ActionPerformed
        int staffQuantity = Integer.valueOf(StaffQuantityField.getText()); // Stores value of number of staff working
        staffQuantity++; // Increases value by 1
        StaffQuantityField.setText(String.valueOf(staffQuantity)); // Displays new value
    }//GEN-LAST:event_btnForwardDate1ActionPerformed

    private void btnSaveGeneratedRotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveGeneratedRotaActionPerformed
            
            DefaultTableModel dtm = (DefaultTableModel)RotaTable.getModel();
            int userID;
            int locationID;
            String date;
            String startTime;
            String endTime;
             
            for (int i = 0; i < RotaTable.getRowCount(); i++) { // For each record in the rota table
                        String staffName = (dtm.getValueAt(i, 0).toString()); // Name is equal to the name stored in the first field of the record
                        String[] nameParts = staffName.split(" "); // Splits staffName into first and last name, stored as a string array
                        String firstName = nameParts[0]; // First name is the first value in the string array
                        String surname = nameParts[1]; // Surname is the second value in the string array
                        try {
                            userID = db.ReturnStaffID(firstName, surname); // SQL Statement - Returns the staffID of the user
                            date = DateField1.getText(); // Date is the value in the date field
                            locationID = Integer.valueOf(dtm.getValueAt(i, 1).toString()); // LocationID is equal to the ID stored in the second field of the record
                            startTime = (dtm.getValueAt(i, 2).toString()); // Start Time is equal to the time stored in the third field of the record
                            endTime = (dtm.getValueAt(i, 3).toString()); // End Time is equal to the time stored in the fourth field of the record
                        
                            int result = db.SubmitShift(userID, locationID, date, startTime, endTime); // Adds the shift to the database
                        } catch(Exception e) {
                            ErrorMessage.setText(e.getMessage());
                        }
                        
            } 

    }//GEN-LAST:event_btnSaveGeneratedRotaActionPerformed

    private void btnAddShiftBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddShiftBackActionPerformed
        AddNewShift.setVisible(false); // Closes Add New Shift screen
        jPanel1.setVisible(false); // Closes Add New Shift screen

    }//GEN-LAST:event_btnAddShiftBackActionPerformed

    private void UpdateTable() {
            try {
            DefaultTableModel dtm = (DefaultTableModel) RotaTable.getModel();
            dtm.setRowCount(0); // Clears Rota table
            ResultSet rs = db.RotaShifts((String) DateField1.getText()); // SQL Statement - Returns all the shifts on the date given as a parameter  
            while (rs.next()) { // For each record
                String name = rs.getString("firstname") + " " + rs.getString("surname"); // Name of the staff member is made up of the first name and surname
                String location = rs.getString("location"); // Location of the shift
                String startTime = rs.getString("starttime"); // Start time of the shift
                String endTime = rs.getString("endtime"); // End time of the shift
                
                String tableData[] = {name, location, startTime, endTime}; // Stores the details of the shift in a string array
                
                dtm.addRow(tableData); // Adds shift to Rota table

            }
            } catch(Exception e) {
            GenerateErrorMessage.setText(e.getMessage()); // Displays the SQL error
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditRota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditRota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditRota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditRota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditRota(user).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame AddNewShift;
    private javax.swing.JTextField DateField;
    private javax.swing.JTextField DateField1;
    private javax.swing.JTextField EndTimeField;
    private javax.swing.JLabel ErrorMessage;
    private javax.swing.JLabel GenerateErrorMessage;
    private javax.swing.JFrame GenerateRota;
    private javax.swing.JComboBox<String> LocationField;
    javax.swing.JTable RotaTable;
    private javax.swing.JLabel ShiftErrorMessage;
    private javax.swing.JTable ShiftTable;
    private javax.swing.JLabel StaffMember;
    private javax.swing.JLabel StaffMember1;
    private javax.swing.JComboBox<String> StaffMemberField;
    private javax.swing.JComboBox<String> StaffMemberField1;
    private javax.swing.JTextField StaffQuantityField;
    private javax.swing.JTextField StartTimeField;
    private javax.swing.JLabel Title;
    private javax.swing.JTable UpcomingHolidayTable;
    private javax.swing.JButton btnAddNewShift;
    private javax.swing.JButton btnAddShiftBack;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBackDate;
    private javax.swing.JButton btnBackDate1;
    private javax.swing.JButton btnConfirmChanges;
    private javax.swing.JButton btnForwardDate;
    private javax.swing.JButton btnForwardDate1;
    private javax.swing.JButton btnGenerateRota;
    private javax.swing.JButton btnGenerateRota1;
    private javax.swing.JButton btnSaveGeneratedRota;
    private javax.swing.JButton btnSubmitNewShift;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAddNewShift;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblEndTime;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblStaffAmount;
    private javax.swing.JLabel lblStartTime;
    private javax.swing.JLabel lblUpcomingHoliday;
    // End of variables declaration//GEN-END:variables
}
